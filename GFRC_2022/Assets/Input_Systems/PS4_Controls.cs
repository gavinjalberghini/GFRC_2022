//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input_Systems/PS4_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PS4_Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PS4_Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PS4_Controls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""8d5f0ea1-6341-43c1-9af9-0410d5955ffe"",
            ""actions"": [
                {
                    ""name"": ""LeftStick"",
                    ""type"": ""Value"",
                    ""id"": ""3a35a415-2279-444c-b5ad-694656483b94"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightStick"",
                    ""type"": ""Value"",
                    ""id"": ""902f9f3c-45d9-431e-ad34-661688255c2d"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Load"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bca0c3c9-1a41-4b10-aa58-28376a64a9f3"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Launch"",
                    ""type"": ""Button"",
                    ""id"": ""7e3c1f17-69fa-4ec1-8208-3e1288d0de8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpPad"",
                    ""type"": ""Button"",
                    ""id"": ""c3519e73-5121-4657-80bc-c7c53eacde03"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftPad"",
                    ""type"": ""Button"",
                    ""id"": ""52f26388-67fc-4490-9bd7-7d4cc92b3c83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownPad"",
                    ""type"": ""Button"",
                    ""id"": ""5530ba73-a05c-48e4-9a79-65aef9f2a05f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightPad"",
                    ""type"": ""Button"",
                    ""id"": ""1a377cce-f766-4e92-9cd5-ff80933ea6f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a4e3f2b5-715a-4ce4-8600-c830defd14e2"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d5929d8-ff5c-49f2-95a1-506ce5899919"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70d2b862-6f47-458d-a5d8-682895f2e98f"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2590a803-0e2b-4de1-95ff-cff68060e7d2"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Launch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac491eb1-47c2-4423-83cf-a0046550742e"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpPad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4de6654f-5d06-4c77-bddc-1fc8c46ce83d"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b83829c9-c74e-45b3-9fff-8a63fb421851"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DownPad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""93bbe532-1c00-4c61-9caf-8519dea588ab"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_LeftStick = m_Gameplay.FindAction("LeftStick", throwIfNotFound: true);
        m_Gameplay_RightStick = m_Gameplay.FindAction("RightStick", throwIfNotFound: true);
        m_Gameplay_Load = m_Gameplay.FindAction("Load", throwIfNotFound: true);
        m_Gameplay_Launch = m_Gameplay.FindAction("Launch", throwIfNotFound: true);
        m_Gameplay_UpPad = m_Gameplay.FindAction("UpPad", throwIfNotFound: true);
        m_Gameplay_LeftPad = m_Gameplay.FindAction("LeftPad", throwIfNotFound: true);
        m_Gameplay_DownPad = m_Gameplay.FindAction("DownPad", throwIfNotFound: true);
        m_Gameplay_RightPad = m_Gameplay.FindAction("RightPad", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_LeftStick;
    private readonly InputAction m_Gameplay_RightStick;
    private readonly InputAction m_Gameplay_Load;
    private readonly InputAction m_Gameplay_Launch;
    private readonly InputAction m_Gameplay_UpPad;
    private readonly InputAction m_Gameplay_LeftPad;
    private readonly InputAction m_Gameplay_DownPad;
    private readonly InputAction m_Gameplay_RightPad;
    public struct GameplayActions
    {
        private @PS4_Controls m_Wrapper;
        public GameplayActions(@PS4_Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftStick => m_Wrapper.m_Gameplay_LeftStick;
        public InputAction @RightStick => m_Wrapper.m_Gameplay_RightStick;
        public InputAction @Load => m_Wrapper.m_Gameplay_Load;
        public InputAction @Launch => m_Wrapper.m_Gameplay_Launch;
        public InputAction @UpPad => m_Wrapper.m_Gameplay_UpPad;
        public InputAction @LeftPad => m_Wrapper.m_Gameplay_LeftPad;
        public InputAction @DownPad => m_Wrapper.m_Gameplay_DownPad;
        public InputAction @RightPad => m_Wrapper.m_Gameplay_RightPad;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @LeftStick.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftStick;
                @LeftStick.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftStick;
                @LeftStick.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftStick;
                @RightStick.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightStick;
                @RightStick.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightStick;
                @RightStick.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightStick;
                @Load.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLoad;
                @Load.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLoad;
                @Load.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLoad;
                @Launch.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLaunch;
                @Launch.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLaunch;
                @Launch.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLaunch;
                @UpPad.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnUpPad;
                @UpPad.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnUpPad;
                @UpPad.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnUpPad;
                @LeftPad.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftPad;
                @LeftPad.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftPad;
                @LeftPad.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLeftPad;
                @DownPad.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDownPad;
                @DownPad.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDownPad;
                @DownPad.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnDownPad;
                @RightPad.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightPad;
                @RightPad.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightPad;
                @RightPad.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRightPad;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftStick.started += instance.OnLeftStick;
                @LeftStick.performed += instance.OnLeftStick;
                @LeftStick.canceled += instance.OnLeftStick;
                @RightStick.started += instance.OnRightStick;
                @RightStick.performed += instance.OnRightStick;
                @RightStick.canceled += instance.OnRightStick;
                @Load.started += instance.OnLoad;
                @Load.performed += instance.OnLoad;
                @Load.canceled += instance.OnLoad;
                @Launch.started += instance.OnLaunch;
                @Launch.performed += instance.OnLaunch;
                @Launch.canceled += instance.OnLaunch;
                @UpPad.started += instance.OnUpPad;
                @UpPad.performed += instance.OnUpPad;
                @UpPad.canceled += instance.OnUpPad;
                @LeftPad.started += instance.OnLeftPad;
                @LeftPad.performed += instance.OnLeftPad;
                @LeftPad.canceled += instance.OnLeftPad;
                @DownPad.started += instance.OnDownPad;
                @DownPad.performed += instance.OnDownPad;
                @DownPad.canceled += instance.OnDownPad;
                @RightPad.started += instance.OnRightPad;
                @RightPad.performed += instance.OnRightPad;
                @RightPad.canceled += instance.OnRightPad;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnLeftStick(InputAction.CallbackContext context);
        void OnRightStick(InputAction.CallbackContext context);
        void OnLoad(InputAction.CallbackContext context);
        void OnLaunch(InputAction.CallbackContext context);
        void OnUpPad(InputAction.CallbackContext context);
        void OnLeftPad(InputAction.CallbackContext context);
        void OnDownPad(InputAction.CallbackContext context);
        void OnRightPad(InputAction.CallbackContext context);
    }
}
